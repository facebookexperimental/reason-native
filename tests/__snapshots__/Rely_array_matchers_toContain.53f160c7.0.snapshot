Rely array matchers › toContain › expect.array.not.toContain failure output
Running 1 test suite
\r\027[33m\027[1m\027[7m RUNS \027[27m\027[22m\027[39m <whiteBright>expect.array.not.toContain failure output</whiteBright>\027[103D\027[K\027[31m\027[1m\027[7m FAIL \027[27m\027[22m\027[39m <whiteBright>expect.array.not.toContain failure output</whiteBright>
<bold><red>  \226\128\162 expect.array.not.toContain failure output \226\128\186 integer contains</red></bold>

    <dim>expect.array(</dim><red>array</red><dim>).</dim>not<dim>.toContain(</dim><green>value</green><dim>)</dim> <dim>/* using === */</dim>
    
    Expected array:
      <red>{1, 2, 3}</red>
    Not to contain value: 
      <green>1</green>

<bold><red>  \226\128\162 expect.array.not.toContain failure output \226\128\186 string reference equality</red></bold>

    <dim>expect.array(</dim><red>array</red><dim>).</dim>not<dim>.toContain(</dim><green>value</green><dim>)</dim> <dim>/* using === */</dim>
    
    Expected array:
      <red>{\"string\", \"bacon\"}</red>
    Not to contain value: 
      <green>string</green>
    
    <dim>Note that you are testing for referential equality between strings. You probably need to use `toContainEqual` instead.</dim>

<bold><red>  \226\128\162 expect.array.not.toContain failure output \226\128\186 record reference equality</red></bold>

    <dim>expect.array(</dim><red>array</red><dim>).</dim>not<dim>.toContain(</dim><green>value</green><dim>)</dim> <dim>/* using === */</dim>
    
    Expected array:
      <red>{{\"Tom\", 42}, {\"Jerry\", 100}}</red>
    Not to contain value: 
      <green>{\"Tom\", 42}</green>


<whiteBright><bold>Test Suites: </bold></whiteBright><red><bold>1 failed</bold></red>, 0 passed, 1 total
<whiteBright><bold>Tests:       </bold></whiteBright><red><bold>3 failed</bold></red>, 0 passed, 3 total

